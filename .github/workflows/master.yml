name: Build/deploy Package Nuget

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    env:
      PATH_PROJECT: "./Nuget/Nuget.csproj"
      SOURCE_NUGET: "https://api.nuget.org/v3/index.json"
      SOURCE_GITHUB: https://nuget.pkg.github.com/$GITHUB_REPOSITORY_OWNER/index.json
      USERNAME: "rcardososilva"

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '5.0.x'    

    # - uses: paulhatch/semantic-version@v4.0.2
    #   with:
    #     The prefix to use to identify tags
    #     tag_prefix: "v"
    #     A string which, if present in a git commit, indicates that a change represents a
    #     major (breaking) change, supports regular expressions wrapped with '/'
    #     major_pattern: "(MAJOR)"
    #     Same as above except indicating a minor change, supports regular expressions wrapped with '/'
    #     minor_pattern: "(MINOR)"
    #     A string to determine the format of the version output
    #     format: "${major}.${minor}.${patch}-prerelease${increment}"
    #     Optional path to check for changes. If any changes are detected in the path the
    #     'changed' output will true. Enter multiple paths separated by spaces.
    #     change_path: "src/my-service"
    #     Named version, will be used as suffix for name version tag
    #     namespace: my-service
    #     If this is set to true, *every* commit will be treated as a new version.
    #     bump_each_commit: false
    #     If true, the body of commits will also be searched for major/minor patterns to determine the version type.
    #     search_commit_body: false
    #     The output method used to generate list of users, 'csv' or 'json'.
    #     user_format_type: "csv"        

    - name: Build 
      run: dotnet build ${{ env.PATH_PROJECT }} --configuration Release

    # - name: Test
    #   run: dotnet test

    - name: Create the Package
      run: dotnet pack ${{ env.PATH_PROJECT }} --configuration Release -o ${{ github.workspace }}/out

    - name: Deploy Nuget.org
      run: dotnet nuget push "${{ github.workspace }}/out/*.nupkg" --api-key ${{ secrets.NUGET_TOKEN }} --source ${{ env.SOURCE_NUGET }} --skip-duplicate

    # - name: Add Source Github Package 
    #   run: dotnet nuget add source --username ${{ env.USERNAME }} --password ${{ secrets.ACCESS_GITHUB_TOKEN }} --store-password-in-clear-text --name github ${{ env.SOURCE_GITHUB }}
    
    - name: Deploy Github Package      
      run: dotnet nuget push "${{ github.workspace }}/out/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source ${{ env.SOURCE_GITHUB }} --skip-duplicate
            
      

