#Pipeline Nuget
name: Test Semantic Version

on:
  pull_request:
    types: [opened, reopened]


env:
  PATH_PROJECT: "./Nuget/Nuget.csproj"
  SOURCE_NUGET: "https://api.nuget.org/v3/index.json"
  SOURCE_GITHUB: https://nuget.pkg.github.com/$GITHUB_REPOSITORY_OWNER/index.json
  USERNAME: "rcardososilva"

jobs:
  nuget:
    if: contains(github.head_ref, 'alpha') || contains(github.head_ref, 'beta') || contains(github.head_ref, 'prerelease')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Fetch all commits
          fetch-depth: 0

      - name: Find the specific suffix to compose the version format
        run: |
          import re
          import os
          github_head_ref = "${{ github.head_ref }}"
          name_branch = github_head_ref.lower()
          suffix_array = re.findall("alpha|beta|prerelease", name_branch)
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
            myfile.write("PRERELEASE=" + suffix_array[0])
        shell: python
      
      - name: Set prerelease suffix as output
        id: get-prerelease-suffix
        run: echo "::set-output name=prerelease_suffix::$(echo $PRERELEASE)"
        shell: bash              

      - name: Semantic versioning
        id: versioning
        uses: PaulHatch/semantic-version@v4.0.2
        with:
          tag_prefix: ''
          major_pattern: "break:"
          minor_pattern: "feat:"
          patch_pattern: "fix:"
          format: "${major}.${minor}.${patch}-$PRERELEASE${increment}"
          #format: "${major}.${minor}.${patch}-${{ steps.get-prerelease-suffix.outputs.prerelease_suffix }}${increment}"
  
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '5.0.x'    

      - name: Build 
        run: dotnet build ${{ env.PATH_PROJECT }} --configuration Release -p:PackageVersion=$PRERELEASE -o ${{ github.workspace }}/out

      - name: Deploy Github Package      
        run: dotnet nuget push "${{ github.workspace }}/out/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source ${{ env.SOURCE_GITHUB }} --skip-duplicate


      - name: Create Release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ steps.versioning.outputs.version }}
          release_name: ${{ steps.versioning.outputs.version }}
          prerelease: true      